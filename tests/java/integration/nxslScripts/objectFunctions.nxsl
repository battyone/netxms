/*
* This script requires:
*     node with 2 interfaces 
*     tempate that is parent for this node  
*/

//Constants
infrastructureService = FindObject(2);
containerName = "Integration Test Container";
nodeName = "Integration Test node";
nodeWithInterfacesId = %d;
templateId = %d;
interfaceName1 = "%s";
interfaceName2 = "%s";
nodeWithInterfaces = FindObject(nodeWithInterfacesId);
template = FindObject(templateId);

//Create container
container = CreateContainer(infrastructureService, containerName);
assert(FindObject(container->id)->name == containerName);

//Create node
node = CreateNode(infrastructureService, nodeName, "0.0.0.0", 0);
assert(FindObject(node->id)->name == nodeName);

containerId = container->id;
nodeId = node->id;

//Bind/Unbind object
BindObject(container, node);
assert(container->children[0]->id == node->id);
UnbindObject(container, node);
assert(container->children[0] == null);

//Find node object
findResult = FindNodeObject($node, nodeName);
assert(findResult->id == node->id);
findResult = FindNodeObject($node, containerName);
assert(findResult == null);
findResult = FindNodeObject($node, nodeId);
assert(findResult->id == node->id);

//Find object
findResult = FindObject(containerName, node);
assert(findResult->id == container->id);
findResult = FindObject(containerId, node);
assert(findResult->name == containerName);
findResult = FindObject("Unknown Object", null);
assert(findResult == null);

//Manage/Unmanage
assert((node->status & Status::UNMANAGED) != Status::UNMANAGED);
UnmanageObject(node);
assert((node->status & Status::UNMANAGED) == Status::UNMANAGED);
ManageObject(node);
assert((node->status & Status::UNMANAGED) != Status::UNMANAGED);

//Mintenance
assert(node->isInMaintenanceMode == false);
EnterMaintenance(node);
assert(node->isInMaintenanceMode);
LeaveMaintenance(node);
assert(node->isInMaintenanceMode == false);

//Custom attributes
assert(GetCustomAttribute(node, "CustomAttribute") == null);
SetCustomAttribute(node, "CustomAttribute", "test123");
assert(GetCustomAttribute(node, "CustomAttribute") == "test123");
SetCustomAttribute(node, "CustomAttribute", "test");
assert(GetCustomAttribute(node, "CustomAttribute") == "test");
DeleteCustomAttribute(node, "CustomAttribute");
assert(GetCustomAttribute(node, "CustomAttribute") == null);

//Find our node in all nodes
nodeFound = false;
for (n : GetAllNodes()) 
{
   if(n->id == nodeId)
   {
   	nodeFound = true;
   	break;
   }
}
assert(nodeFound);

//Interfaces
name = GetInterfaceName(nodeWithInterfaces, 0);
assert(name == interfaceName1);
name = GetInterfaceName(nodeWithInterfaces, 1);
assert(name == interfaceName2);

interface = GetInterfaceObject(nodeWithInterfaces, 0); 
assert(interface->ifIndex == 0); 
assert(interface->name == interfaceName1); 

assert(interface->expectedState == 0); 
SetInterfaceExpectedState(i, "IGNORE");
assert(interface->expectedState == 2); 

interfaces = GetNodeInterfaces(nodeWithInterfaces);
assert(interfaces[0]->ifIndex == 0); 
assert(interfaces[0]->name == interfaceName1); 
assert(interfaces[1]->ifIndex == 1); 
assert(interfaces[1]->name == interfaceName2); 

//Parents, children and templates
parents = GetNodeParents(node);
println parents[0]->name;
assert(parents[0]->name == "Infrastructure Services");
assert(parents[1] == null);

//GetNodeTemplates()
//GetObjectChildren()
//GetObjectParents()

RenameObject(container, "Test2");
assert(container->name == "Test2");

//Delete all objects
DeleteObject(container);
DeleteObject(node);
sleep(30000);
assert(FindObject(nodeId) == null);
assert(FindObject(containerId) == null);
